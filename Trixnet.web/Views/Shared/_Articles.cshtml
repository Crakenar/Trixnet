@inject OrchardCore.IOrchardHelper Orchard
@*

    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    string who = "";
    if (@ViewBag.Who != null)
    {
        who = @ViewBag.Who;
    }

    //Permet de savoir le type d'article à afficher
    string type = ViewContext.ViewBag.TypeOfArticle;
    //Combien d'article prendre de la BD Orchard
    int how_many_retreived = 3;
    var tab_articles = await Orchard.GetRecentContentItemsByContentTypeAsync(type, how_many_retreived);

    int maxCharacterDescription = 200;
    int maxCharacterTitle = 60;
}
<!--Probleme; load le css pour toute la page et non pas juste pour le template _Article.cshtml-->
<link href="@Url.Content("~/css/ArticleTemplate.css")" rel="stylesheet" type="text/css" />
@Orchard.ConsoleLog(tab_articles);

<div class="bg-white">
    <div class="trixell-X AppSection SectionGD SectionHB">
        <div class="container showcase-text">
            <h2 class="jaapooki" style="font-size: 1.5rem; color: rgb(19, 133,203);"><i class="fas fa-newspaper"></i>   Actualités @who </h2>
        </div>
        @foreach (var articles in tab_articles)
        {
            List<string> imagesPrincipales = new List<string>();
            string articleText = articles.Content.MarkdownBodyPart.Markdown;
            string articleTitre = articles.DisplayText;
            //si le texte est null alors on met "pas de description"
            articleText ??= "pas de description";

            Trixnet.web.Services.UtilitairesClass utils = new Services.UtilitairesClass();
            //Permet de recuperer l'ensemble des documents d'un article
            var documents = utils.setDocumentsArticle(articles.Content.BagPart.Media.Paths);
            imagesPrincipales = utils.getImagePrincipale(type, articles);
            @foreach (var item in imagesPrincipales)
            {
                <div class="modal fade" id="article-@articles.ContentItemId" tabindex="-1" role="dialog" aria-labelledby="articleModal" aria-hidden="true">
                    <div class="modal-dialog modal-lg" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title title-overflow" id="articleModal">@(articleTitre.Length > maxCharacterTitle ? articleTitre.Substring(0, maxCharacterTitle) : articleTitre)</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body"> @await Orchard.MarkdownToHtmlAsync((string)articles.Content.MarkdownBodyPart.Markdown)</div>
                            @if (documents.Count > 0)
                            {
                                <hr />
                                <div class="row">
                                    <!--Affichage de l'ensemble des documents liés à l'article-->
                                    @for (int p = 0; p < documents.Count; p++)
                                    {
                                        <span class="col-lg-4">
                                            <img src="@documents[p].GetType().GetProperty("imageShow").GetValue(@documents[p],null)" width="40" height="30" />
                                            <a href="@documents[p].GetType().GetProperty("downloadLink").GetValue(@documents[p],null)" target="_blank">@documents[p].GetType().GetProperty("nameDoc").GetValue(@documents[p], null)</a>
                                        </span>
                                    }
                                </div>
                            }
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!--Ici c'est l'affichage simple dans page HTML-->
                <div class="container showcase-text">
                    <a href="#article-@articles.ContentItemId" class="row link-news" data-toggle="modal" data-target="#article-@articles.ContentItemId">
                        <div class="col-lg-4 text-white img-news" style="background-image: url('@item');"></div>
                        <div class="col-lg-8 text-news">
                            <h2 class="title-overflow">@(articleTitre.Length > maxCharacterTitle ? articleTitre.Substring(0, maxCharacterTitle) : articleTitre)</h2>
                            <p class="lead mb-0" style="text-justify: distribute;">@(articleText.Length > maxCharacterDescription ?  articleText.Substring(0, maxCharacterDescription) :  articleText)<p>
                             @*<p class="lead mb-0" style="text-justify: distribute;"> @await Orchard.MarkdownToHtmlAsync((string)articles.Content.MarkdownBodyPart.Markdown)</p>*@  
                        </div>
                    </a>
                    @if (documents.Count > 0)
                    {
                        <div class="row">
                            <!--Affichage de l'ensemble des documents liés à l'article-->
                            @for (int p = 0; p < documents.Count; p++)
                            {
                                <!--<span>-->
                                <div class="col-lg-4">
                                    <img src="@documents[p].GetType().GetProperty("imageShow").GetValue(@documents[p],null)" width="40" height="30" loading="lazy" />
                                    <a href="@documents[p].GetType().GetProperty("downloadLink").GetValue(@documents[p],null)" target="_blank">@documents[p].GetType().GetProperty("nameDoc").GetValue(@documents[p], null)</a>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>